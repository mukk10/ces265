/*
CES265, a multi-threaded HEVC encoder.
Copyright (C) 2013-2014, CES265 project.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
* @file Cabac.cpp
* @author Muhammad Usman Karim Khan, Muhammad Shafique, Joerg Henkel (CES, KIT)
* @brief This file contains the methods used in the Cabac class
*/

#include <Defines.h>
#include <TypeDefs.h>
#include <ImageParameters.h>
#include <BitStreamHandler.h>
#include <Cabac.h>
#include <string.h>

/**
*	CU split flag encoding.
*/
static const u8
	INIT_SPLIT_FLAG[3][NUM_SPLIT_FLAG_CTX] = {
		{ 107,  139,  126, },
		{ 107,  139,  126, },
		{ 139,  141,  157, },
};

/**
*	CU skip flag encoding.
*/
static const u8
	INIT_SKIP_FLAG[3][NUM_SKIP_FLAG_CTX] = {
		{ 197,  185,  201, },
		{ 197,  185,  201, },
		{ CNU,  CNU,  CNU, },
};

/**
*	ALF flag control.
*/
static const u8
	INIT_ALF_CTRL_FLAG[3][NUM_ALF_CTRL_FLAG_CTX] = {
		{ 102, },
		{ 102, },
		{ 118, },
};

/**
*	CU merge flag.
*/
static const u8
	INIT_MERGE_FLAG_EXT[3][NUM_MERGE_FLAG_EXT_CTX] = {
		{ 154, },
		{ 110, },
		{ CNU, },
};

/**
*	Merge index.
*/
static const u8
	INIT_MERGE_IDX_EXT[3][NUM_MERGE_IDX_EXT_CTX] = {
		{ 137, },
		{ 122, },
		{ CNU, },
};

/**
*	Parition size.
*/
static const u8
	INIT_PART_SIZE[3][NUM_PART_SIZE_CTX] = {
		{ 154,  139,  CNU,  CNU, },
		{ 154,  139,  CNU,  CNU, },
		{ 184,  CNU,  CNU,  CNU, },
};

/**
*	AMP position.
*/
static const u8
	INIT_CU_AMP_POS[3][NUM_CU_AMP_CTX] = {
		{ 154, },
		{ 154, },
		{ CNU, },
};

/**
*	Prediciton mode.
*/
static const u8
	INIT_PRED_MODE[3][NUM_PRED_MODE_CTX] = {
		{ 134, },
		{ 149, },
		{ CNU, },
};

/**
*	Intra prediction.
*/
static const u8
	INIT_INTRA_PRED_MODE[3][NUM_ADI_CTX] = {
		{ 183, },
		{ 154, },
		{ 184, },
};

/**
*	Chroma prediction.
*/
static const u8
	INIT_CHROMA_PRED_MODE[3][NUM_CHROMA_PRED_CTX] = {
		{ 152,  139, },
		{ 152,  139, },
		{  63,  139, },
};

/**
*	Inter direction.
*/
static const u8
	INIT_INTER_DIR[3][NUM_INTER_DIR_CTX] = {
		{  95,   79,   63,   31, },
		{  95,   79,   63,   31, },
		{ CNU,  CNU,  CNU,  CNU, },
};

/**
*	MVD.
*/
static const u8
	INIT_MVD[3][NUM_MV_RES_CTX] = {
		{ 169,  198, },
		{ 140,  198, },
		{ CNU,  CNU, },
};

/**
*	Reference pictures.
*/
static const u8
	INIT_REF_PIC[3][NUM_REF_NO_CTX] = {
		{ 153,  153 }, 
		{ 153,  153 }, 
		{ CNU,  CNU }, 
};

/**
*	Delta QP.
*/
static const u8
	INIT_DQP[3][NUM_DELTA_QP_CTX] = {
		{ 154,  154,  154, },
		{ 154,  154,  154, },
		{ 154,  154,  154, },
};

/**
*	CBF.
*/
static const u8
	INIT_QT_CBF[3][2*NUM_QT_CBF_CTX] = {
		{ 153,  111,  CNU,  CNU,  CNU,  149,   92,  167,  CNU,  CNU, },
		{ 153,  111,  CNU,  CNU,  CNU,  149,  107,  167,  CNU,  CNU, },
		{ 111,  141,  CNU,  CNU,  CNU,   94,  138,  182,  CNU,  CNU, },
};

/**
*	CBF.
*/
static const u8
	INIT_QT_ROOT_CBF[3][NUM_QT_ROOT_CBF_CTX] = {
		{  79, },
		{  79, },
		{ CNU, },
};

static const u8
	INIT_LAST[3][2*NUM_LAST_FLAG_XY_CTX] = {
		{
			125,  110,  124,  110,   95,   94,  125,  111,  111,   79,  125,  126,  111,  111,   79,
			108,  123,   93,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,
		},
		{
			125,  110,   94,  110,   95,   79,  125,  111,  110,   78,  110,  111,  111,   95,   94,
			108,  123,  108,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,
		},
		{
			110,  110,  124,  125,  140,  153,  125,  127,  140,  109,  111,  143,  127,  111,   79,
			108,  123,   63,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,  CNU,
		},
};

static const u8
	INIT_SIG_CG_FLAG[3][2 * NUM_SIG_CG_FLAG_CTX] = {
		{
			121,  140,
			61,  154,
		},
		{
			121,  140,
			61,  154,
		},
		{
			91,  171,
			134,  141,
		},
};

static const u8
	INIT_SIG_FLAG[3][NUM_SIG_FLAG_CTX] = {
		{ 170,  154,  139,  153,  139,  123,  123,   63,  124,  166,  183,  140,  136,  153,  154,  166,  183,  140,  136,  153,  154,  166,  183,  140,  136,  153,  154,  170,  153,  138,  138,  122,  121,  122,  121,  167,  151,  183,  140,  151,  183,  140,  }, 
		{ 155,  154,  139,  153,  139,  123,  123,   63,  153,  166,  183,  140,  136,  153,  154,  166,  183,  140,  136,  153,  154,  166,  183,  140,  136,  153,  154,  170,  153,  123,  123,  107,  121,  107,  121,  167,  151,  183,  140,  151,  183,  140,  }, 
		{ 111,  111,  125,  110,  110,   94,  124,  108,  124,  107,  125,  141,  179,  153,  125,  107,  125,  141,  179,  153,  125,  107,  125,  141,  179,  153,  125,  140,  139,  182,  182,  152,  136,  152,  136,  153,  136,  139,  111,  136,  139,  111,  }, 
};

static const u8
	INIT_ONE_FLAG[3][NUM_ONE_FLAG_CTX] = {
		{ 154,  196,  167,  167,  154,  152,  167,  182,  182,  134,  149,  136,  153,  121,  136,  122,  169,  208,  166,  167,  154,  152,  167,  182, },
		{ 154,  196,  196,  167,  154,  152,  167,  182,  182,  134,  149,  136,  153,  121,  136,  137,  169,  194,  166,  167,  154,  167,  137,  182, },
		{ 140,   92,  137,  138,  140,  152,  138,  139,  153,   74,  149,   92,  139,  107,  122,  152,  140,  179,  166,  182,  140,  227,  122,  197, },
};

static const u8
	INIT_ABS_FLAG[3][NUM_ABS_FLAG_CTX] = {
		{ 107,  167,   91,  107,  107,  167, },
		{ 107,  167,   91,  122,  107,  167, },
		{ 138,  153,  136,  167,  152,  152, },
};

static const u8
	INIT_MVP_IDX[3][NUM_MVP_IDX_CTX] = {
		{ 168,  CNU, },
		{ 168,  CNU, },
		{ CNU,  CNU, },
};

static const u8
	INIT_TRANS_SUBDIV_FLAG[3][NUM_TRANS_SUBDIV_FLAG_CTX] = {
		{ 153,  138,  138, },
		{ 124,  138,   94, },
		{ 224,  167,  122, },
};

static const u8
	INIT_TRANSFORMSKIP_FLAG[3][2*NUM_TRANSFORMSKIP_FLAG_CTX] = {
		{ 139,  139},
		{ 139,  139},
		{ 139,  139},
};

/**
*	Table 9-42.
*	Specification of rangeTabLPS depending on pStateIdx and qCodIRangeIdx	
*/
static const u8 
	g_pbLPSTable[64][4] = {
		{ 128, 176, 208, 240},
		{ 128, 167, 197, 227},
		{ 128, 158, 187, 216},
		{ 123, 150, 178, 205},
		{ 116, 142, 169, 195},
		{ 111, 135, 160, 185},
		{ 105, 128, 152, 175},
		{ 100, 122, 144, 166},
		{  95, 116, 137, 158},
		{  90, 110, 130, 150},
		{  85, 104, 123, 142},
		{  81,  99, 117, 135},
		{  77,  94, 111, 128},
		{  73,  89, 105, 122},
		{  69,  85, 100, 116},
		{  66,  80,  95, 110},
		{  62,  76,  90, 104},
		{  59,  72,  86,  99},
		{  56,  69,  81,  94},
		{  53,  65,  77,  89},
		{  51,  62,  73,  85},
		{  48,  59,  69,  80},
		{  46,  56,  66,  76},
		{  43,  53,  63,  72},
		{  41,  50,  59,  69},
		{  39,  48,  56,  65},
		{  37,  45,  54,  62},
		{  35,  43,  51,  59},
		{  33,  41,  48,  56},
		{  32,  39,  46,  53},
		{  30,  37,  43,  50},
		{  29,  35,  41,  48},
		{  27,  33,  39,  45},
		{  26,  31,  37,  43},
		{  24,  30,  35,  41},
		{  23,  28,  33,  39},
		{  22,  27,  32,  37},
		{  21,  26,  30,  35},
		{  20,  24,  29,  33},
		{  19,  23,  27,  31},
		{  18,  22,  26,  30},
		{  17,  21,  25,  28},
		{  16,  20,  23,  27},
		{  15,  19,  22,  25},
		{  14,  18,  21,  24},
		{  14,  17,  20,  23},
		{  13,  16,  19,  22},
		{  12,  15,  18,  21},
		{  12,  14,  17,  20},
		{  11,  14,  16,  19},
		{  11,  13,  15,  18},
		{  10,  12,  15,  17},
		{  10,  12,  14,  16},
		{   9,  11,  13,  15},
		{   9,  11,  12,  14},
		{   8,  10,  12,  14},
		{   8,   9,  11,  13},
		{   7,   9,  11,  12},
		{   7,   9,  10,  12},
		{   7,   8,  10,  11},
		{   6,   8,   9,  11},
		{   6,   7,   9,  10},
		{   6,   7,   8,   9},
		{   2,   2,   2,   2}
};

static const u8
	g_pbRenormTable[32] = {
		6,  5,  4,  4,
		3,  3,  3,  3,
		2,  2,  2,  2,
		2,  2,  2,  2,
		1,  1,  1,  1,
		1,  1,  1,  1,
		1,  1,  1,  1,
		1,  1,  1,  1
};

/**
*	Table 9-43.
*	State transition table.
*/
static const u8
	g_pbNextStateLPS[128] = {
		1, 0, 0, 1, 2, 3, 4, 5, 4, 5, 8, 9, 8, 9, 10, 11,
		12, 13, 14, 15, 16, 17, 18, 19, 18, 19, 22, 23, 22, 23, 24, 25,
		26, 27, 26, 27, 30, 31, 30, 31, 32, 33, 32, 33, 36, 37, 36, 37,
		38, 39, 38, 39, 42, 43, 42, 43, 44, 45, 44, 45, 46, 47, 48, 49,
		48, 49, 50, 51, 52, 53, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59,
		58, 59, 60, 61, 60, 61, 60, 61, 62, 63, 64, 65, 64, 65, 66, 67,
		66, 67, 66, 67, 68, 69, 68, 69, 70, 71, 70, 71, 70, 71, 72, 73,
		72, 73, 72, 73, 74, 75, 74, 75, 74, 75, 76, 77, 76, 77, 126, 127
};

/**
*	Table 9-43.
*	State transition table.
*/
static const u8
	g_pbNextStateMPS[128] = {
		2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
		18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
		34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
		50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
		66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
		82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
		98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
		114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 124, 125, 126, 127
};

const u16 g_puiScanIdx2[4][2*2] = {
	{ 0, 1, 2, 3 },
	{ 0, 1, 2, 3 },
	{ 0, 2, 1, 3 },
	{ 0, 2, 1, 3 },
};

const u16 g_puiScanIdx4[4][4*4] = {
	{
		0,    1,    4,    8,
		5,    2,    3,    6,
		9,   12,   13,   10,
		7,   11,   14,   15,
	},
	{
		0,    1,    2,    3,
		4,    5,    6,    7,
		8,    9,   10,   11,
		12,   13,   14,   15,
	},
	{
		0,    4,    8,   12,
		1,    5,    9,   13,
		2,    6,   10,   14,
		3,    7,   11,   15,
	},
	{
		0,    4,    1,    8,
		5,    2,   12,    9,
		6,    3,   13,   10,
		7,   14,   11,   15,
	},
};

const u16 g_puiScanIdx8[4][8*8] = {
	{
		0,    1,   8,  16,   9,   2,   3,  10, 
		17,  24,  32,  25,  18,  11,   4,   5, 
		12,  19,  26,  33,  40,  48,  41,  34, 
		27,  20,  13,   6,   7,  14,  21,  28, 
		35,  42,  49,  56,  57,  50,  43,  36, 
		29,  22,  15,  23,  30,  37,  44,  51, 
		58,  59,  52,  45,  38,  31,  39,  46, 
		53,  60,  61,  54,  47,  55,  62,  63, 
	},
	{
		0,    1,   2,   3,   8,   9,  10,  11, 
		16,  17,  18,  19,  24,  25,  26,  27, 
		4,    5,   6,   7,  12,  13,  14,  15, 
		20,  21,  22,  23,  28,  29,  30,  31, 
		32,  33,  34,  35,  40,  41,  42,  43, 
		48,  49,  50,  51,  56,  57,  58,  59, 
		36,  37,  38,  39,  44,  45,  46,  47, 
		52,  53,  54,  55,  60,  61,  62,  63, 
	},
	{
		0,    8,  16,  24,   1,   9,  17,  25, 
		2,   10,  18,  26,   3,  11,  19,  27, 
		32,  40,  48,  56,  33,  41,  49,  57, 
		34,  42,  50,  58,  35,  43,  51,  59, 
		4,   12,  20,  28,   5,  13,  21,  29, 
		6,   14,  22,  30,   7,  15,  23,  31, 
		36,  44,  52,  60,  37,  45,  53,  61, 
		38,  46,  54,  62,  39,  47,  55,  63, 
	},
	{
		0,    8,   1,  16,   9,   2,  24,  17, 
		10,   3,  25,  18,  11,  26,  19,  27, 
		32,  40,  33,  48,  41,  34,  56,  49, 
		42,  35,  57,  50,  43,  58,  51,  59, 
		4,   12,   5,  20,  13,   6,  28,  21, 
		14,   7,  29,  22,  15,  30,  23,  31, 
		36,  44,  37,  52,  45,  38,  60,  53, 
		46,  39,  61,  54,  47,  62,  55,  63, 
	},
};

const u16 g_puiScanIdx16[4][16*16] = {
	{
		0,   1,  16,  32,  17,   2,   3,  18,  33,  48,  64,  49,  34,  19,   4,   5, 
		20,  35,  50,  65,  80,  96,  81,  66,  51,  36,  21,   6,   7,  22,  37,  52, 
		67,  82,  97, 112, 128, 113,  98,  83,  68,  53,  38,  23,   8,   9,  24,  39, 
		54,  69,  84,  99, 114, 129, 144, 160, 145, 130, 115, 100,  85,  70,  55,  40, 
		25,  10,  11,  26,  41,  56,  71,  86, 101, 116, 131, 146, 161, 176, 192, 177, 
		162, 147, 132, 117, 102,  87,  72,  57,  42,  27,  12,  13,  28,  43,  58,  73, 
		88, 103, 118, 133, 148, 163, 178, 193, 208, 224, 209, 194, 179, 164, 149, 134, 
		119, 104,  89,  74,  59,  44,  29,  14,  15,  30,  45,  60,  75,  90, 105, 120, 
		135, 150, 165, 180, 195, 210, 225, 240, 241, 226, 211, 196, 181, 166, 151, 136, 
		121, 106,  91,  76,  61,  46,  31,  47,  62,  77,  92, 107, 122, 137, 152, 167, 
		182, 197, 212, 227, 242, 243, 228, 213, 198, 183, 168, 153, 138, 123, 108,  93, 
		78,  63,  79,  94, 109, 124, 139, 154, 169, 184, 199, 214, 229, 244, 245, 230, 
		215, 200, 185, 170, 155, 140, 125, 110,  95, 111, 126, 141, 156, 171, 186, 201, 
		216, 231, 246, 247, 232, 217, 202, 187, 172, 157, 142, 127, 143, 158, 173, 188, 
		203, 218, 233, 248, 249, 234, 219, 204, 189, 174, 159, 175, 190, 205, 220, 235, 
		250, 251, 236, 221, 206, 191, 207, 222, 237, 252, 253, 238, 223, 239, 254, 255, 
	},
	{
		0,   1,   2,   3,  16,  17,  18,  19,  32,  33,  34,  35,  48,  49,  50,  51, 
		4,   5,   6,   7,  20,  21,  22,  23,  36,  37,  38,  39,  52,  53,  54,  55, 
		8,   9,  10,  11,  24,  25,  26,  27,  40,  41,  42,  43,  56,  57,  58,  59, 
		12,  13,  14,  15,  28,  29,  30,  31,  44,  45,  46,  47,  60,  61,  62,  63, 
		64,  65,  66,  67,  80,  81,  82,  83,  96,  97,  98,  99, 112, 113, 114, 115, 
		68,  69,  70,  71,  84,  85,  86,  87, 100, 101, 102, 103, 116, 117, 118, 119, 
		72,  73,  74,  75,  88,  89,  90,  91, 104, 105, 106, 107, 120, 121, 122, 123, 
		76,  77,  78,  79,  92,  93,  94,  95, 108, 109, 110, 111, 124, 125, 126, 127, 
		128, 129, 130, 131, 144, 145, 146, 147, 160, 161, 162, 163, 176, 177, 178, 179, 
		132, 133, 134, 135, 148, 149, 150, 151, 164, 165, 166, 167, 180, 181, 182, 183, 
		136, 137, 138, 139, 152, 153, 154, 155, 168, 169, 170, 171, 184, 185, 186, 187, 
		140, 141, 142, 143, 156, 157, 158, 159, 172, 173, 174, 175, 188, 189, 190, 191, 
		192, 193, 194, 195, 208, 209, 210, 211, 224, 225, 226, 227, 240, 241, 242, 243, 
		196, 197, 198, 199, 212, 213, 214, 215, 228, 229, 230, 231, 244, 245, 246, 247, 
		200, 201, 202, 203, 216, 217, 218, 219, 232, 233, 234, 235, 248, 249, 250, 251, 
		204, 205, 206, 207, 220, 221, 222, 223, 236, 237, 238, 239, 252, 253, 254, 255, 
	},
	{
		0,  16,  32,  48,   1,  17,  33,  49,   2,  18,  34,  50,   3,  19,  35,  51, 
		64,  80,  96, 112,  65,  81,  97, 113,  66,  82,  98, 114,  67,  83,  99, 115, 
		128, 144, 160, 176, 129, 145, 161, 177, 130, 146, 162, 178, 131, 147, 163, 179, 
		192, 208, 224, 240, 193, 209, 225, 241, 194, 210, 226, 242, 195, 211, 227, 243, 
		4,  20,  36,  52,   5,  21,  37,  53,   6,  22,  38,  54,   7,  23,  39,  55, 
		68,  84, 100, 116,  69,  85, 101, 117,  70,  86, 102, 118,  71,  87, 103, 119, 
		132, 148, 164, 180, 133, 149, 165, 181, 134, 150, 166, 182, 135, 151, 167, 183, 
		196, 212, 228, 244, 197, 213, 229, 245, 198, 214, 230, 246, 199, 215, 231, 247, 
		8,  24,  40,  56,   9,  25,  41,  57,  10,  26,  42,  58,  11,  27,  43,  59, 
		72,  88, 104, 120,  73,  89, 105, 121,  74,  90, 106, 122,  75,  91, 107, 123, 
		136, 152, 168, 184, 137, 153, 169, 185, 138, 154, 170, 186, 139, 155, 171, 187, 
		200, 216, 232, 248, 201, 217, 233, 249, 202, 218, 234, 250, 203, 219, 235, 251, 
		12,  28,  44,  60,  13,  29,  45,  61,  14,  30,  46,  62,  15,  31,  47,  63, 
		76,  92, 108, 124,  77,  93, 109, 125,  78,  94, 110, 126,  79,  95, 111, 127, 
		140, 156, 172, 188, 141, 157, 173, 189, 142, 158, 174, 190, 143, 159, 175, 191, 
		204, 220, 236, 252, 205, 221, 237, 253, 206, 222, 238, 254, 207, 223, 239, 255, 
	},
	{
		0,  16,   1,  32,  17,   2,  48,  33,  18,   3,  49,  34,  19,  50,  35,  51, 
		64,  80,  65,  96,  81,  66, 112,  97,  82,  67, 113,  98,  83, 114,  99, 115, 
		4,  20,   5,  36,  21,   6,  52,  37,  22,   7,  53,  38,  23,  54,  39,  55, 
		128, 144, 129, 160, 145, 130, 176, 161, 146, 131, 177, 162, 147, 178, 163, 179, 
		68,  84,  69, 100,  85,  70, 116, 101,  86,  71, 117, 102,  87, 118, 103, 119, 
		8,  24,   9,  40,  25,  10,  56,  41,  26,  11,  57,  42,  27,  58,  43,  59, 
		192, 208, 193, 224, 209, 194, 240, 225, 210, 195, 241, 226, 211, 242, 227, 243, 
		132, 148, 133, 164, 149, 134, 180, 165, 150, 135, 181, 166, 151, 182, 167, 183, 
		72,  88,  73, 104,  89,  74, 120, 105,  90,  75, 121, 106,  91, 122, 107, 123, 
		12,  28,  13,  44,  29,  14,  60,  45,  30,  15,  61,  46,  31,  62,  47,  63, 
		196, 212, 197, 228, 213, 198, 244, 229, 214, 199, 245, 230, 215, 246, 231, 247, 
		136, 152, 137, 168, 153, 138, 184, 169, 154, 139, 185, 170, 155, 186, 171, 187, 
		76,  92,  77, 108,  93,  78, 124, 109,  94,  79, 125, 110,  95, 126, 111, 127, 
		200, 216, 201, 232, 217, 202, 248, 233, 218, 203, 249, 234, 219, 250, 235, 251, 
		140, 156, 141, 172, 157, 142, 188, 173, 158, 143, 189, 174, 159, 190, 175, 191, 
		204, 220, 205, 236, 221, 206, 252, 237, 222, 207, 253, 238, 223, 254, 239, 255, 
	},
};

const u16 g_puiScanIdx32[4][32*32] = {
	{
		0,   1,  32,  64,  33,   2,   3,  34,  65,  96, 128,  97,  66,  35,   4,   5,  36,  67,  98, 129, 160, 192, 161, 130,  99,  68,  37,   6,   7,  38,  69, 100, 
		131, 162, 193, 224, 256, 225, 194, 163, 132, 101,  70,  39,   8,   9,  40,  71, 102, 133, 164, 195, 226, 257, 288, 320, 289, 258, 227, 196, 165, 134, 103,  72, 
		41,  10,  11,  42,  73, 104, 135, 166, 197, 228, 259, 290, 321, 352, 384, 353, 322, 291, 260, 229, 198, 167, 136, 105,  74,  43,  12,  13,  44,  75, 106, 137, 
		168, 199, 230, 261, 292, 323, 354, 385, 416, 448, 417, 386, 355, 324, 293, 262, 231, 200, 169, 138, 107,  76,  45,  14,  15,  46,  77, 108, 139, 170, 201, 232, 
		263, 294, 325, 356, 387, 418, 449, 480, 512, 481, 450, 419, 388, 357, 326, 295, 264, 233, 202, 171, 140, 109,  78,  47,  16,  17,  48,  79, 110, 141, 172, 203, 
		234, 265, 296, 327, 358, 389, 420, 451, 482, 513, 544, 576, 545, 514, 483, 452, 421, 390, 359, 328, 297, 266, 235, 204, 173, 142, 111,  80,  49,  18,  19,  50, 
		81, 112, 143, 174, 205, 236, 267, 298, 329, 360, 391, 422, 453, 484, 515, 546, 577, 608, 640, 609, 578, 547, 516, 485, 454, 423, 392, 361, 330, 299, 268, 237, 
		206, 175, 144, 113,  82,  51,  20,  21,  52,  83, 114, 145, 176, 207, 238, 269, 300, 331, 362, 393, 424, 455, 486, 517, 548, 579, 610, 641, 672, 704, 673, 642, 
		611, 580, 549, 518, 487, 456, 425, 394, 363, 332, 301, 270, 239, 208, 177, 146, 115,  84,  53,  22,  23,  54,  85, 116, 147, 178, 209, 240, 271, 302, 333, 364, 
		395, 426, 457, 488, 519, 550, 581, 612, 643, 674, 705, 736, 768, 737, 706, 675, 644, 613, 582, 551, 520, 489, 458, 427, 396, 365, 334, 303, 272, 241, 210, 179, 
		148, 117,  86,  55,  24,  25,  56,  87, 118, 149, 180, 211, 242, 273, 304, 335, 366, 397, 428, 459, 490, 521, 552, 583, 614, 645, 676, 707, 738, 769, 800, 832, 
		801, 770, 739, 708, 677, 646, 615, 584, 553, 522, 491, 460, 429, 398, 367, 336, 305, 274, 243, 212, 181, 150, 119,  88,  57,  26,  27,  58,  89, 120, 151, 182, 
		213, 244, 275, 306, 337, 368, 399, 430, 461, 492, 523, 554, 585, 616, 647, 678, 709, 740, 771, 802, 833, 864, 896, 865, 834, 803, 772, 741, 710, 679, 648, 617, 
		586, 555, 524, 493, 462, 431, 400, 369, 338, 307, 276, 245, 214, 183, 152, 121,  90,  59,  28,  29,  60,  91, 122, 153, 184, 215, 246, 277, 308, 339, 370, 401, 
		432, 463, 494, 525, 556, 587, 618, 649, 680, 711, 742, 773, 804, 835, 866, 897, 928, 960, 929, 898, 867, 836, 805, 774, 743, 712, 681, 650, 619, 588, 557, 526, 
		495, 464, 433, 402, 371, 340, 309, 278, 247, 216, 185, 154, 123,  92,  61,  30,  31,  62,  93, 124, 155, 186, 217, 248, 279, 310, 341, 372, 403, 434, 465, 496, 
		527, 558, 589, 620, 651, 682, 713, 744, 775, 806, 837, 868, 899, 930, 961, 992, 993, 962, 931, 900, 869, 838, 807, 776, 745, 714, 683, 652, 621, 590, 559, 528, 
		497, 466, 435, 404, 373, 342, 311, 280, 249, 218, 187, 156, 125,  94,  63,  95, 126, 157, 188, 219, 250, 281, 312, 343, 374, 405, 436, 467, 498, 529, 560, 591, 
		622, 653, 684, 715, 746, 777, 808, 839, 870, 901, 932, 963, 994, 995, 964, 933, 902, 871, 840, 809, 778, 747, 716, 685, 654, 623, 592, 561, 530, 499, 468, 437, 
		406, 375, 344, 313, 282, 251, 220, 189, 158, 127, 159, 190, 221, 252, 283, 314, 345, 376, 407, 438, 469, 500, 531, 562, 593, 624, 655, 686, 717, 748, 779, 810, 
		841, 872, 903, 934, 965, 996, 997, 966, 935, 904, 873, 842, 811, 780, 749, 718, 687, 656, 625, 594, 563, 532, 501, 470, 439, 408, 377, 346, 315, 284, 253, 222, 
		191, 223, 254, 285, 316, 347, 378, 409, 440, 471, 502, 533, 564, 595, 626, 657, 688, 719, 750, 781, 812, 843, 874, 905, 936, 967, 998, 999, 968, 937, 906, 875, 
		844, 813, 782, 751, 720, 689, 658, 627, 596, 565, 534, 503, 472, 441, 410, 379, 348, 317, 286, 255, 287, 318, 349, 380, 411, 442, 473, 504, 535, 566, 597, 628, 
		659, 690, 721, 752, 783, 814, 845, 876, 907, 938, 969, 1000, 1001, 970, 939, 908, 877, 846, 815, 784, 753, 722, 691, 660, 629, 598, 567, 536, 505, 474, 443, 412, 
		381, 350, 319, 351, 382, 413, 444, 475, 506, 537, 568, 599, 630, 661, 692, 723, 754, 785, 816, 847, 878, 909, 940, 971, 1002, 1003, 972, 941, 910, 879, 848, 817, 
		786, 755, 724, 693, 662, 631, 600, 569, 538, 507, 476, 445, 414, 383, 415, 446, 477, 508, 539, 570, 601, 632, 663, 694, 725, 756, 787, 818, 849, 880, 911, 942, 
		973, 1004, 1005, 974, 943, 912, 881, 850, 819, 788, 757, 726, 695, 664, 633, 602, 571, 540, 509, 478, 447, 479, 510, 541, 572, 603, 634, 665, 696, 727, 758, 789, 
		820, 851, 882, 913, 944, 975, 1006, 1007, 976, 945, 914, 883, 852, 821, 790, 759, 728, 697, 666, 635, 604, 573, 542, 511, 543, 574, 605, 636, 667, 698, 729, 760, 
		791, 822, 853, 884, 915, 946, 977, 1008, 1009, 978, 947, 916, 885, 854, 823, 792, 761, 730, 699, 668, 637, 606, 575, 607, 638, 669, 700, 731, 762, 793, 824, 855, 
		886, 917, 948, 979, 1010, 1011, 980, 949, 918, 887, 856, 825, 794, 763, 732, 701, 670, 639, 671, 702, 733, 764, 795, 826, 857, 888, 919, 950, 981, 1012, 1013, 982, 
		951, 920, 889, 858, 827, 796, 765, 734, 703, 735, 766, 797, 828, 859, 890, 921, 952, 983, 1014, 1015, 984, 953, 922, 891, 860, 829, 798, 767, 799, 830, 861, 892, 
		923, 954, 985, 1016, 1017, 986, 955, 924, 893, 862, 831, 863, 894, 925, 956, 987, 1018, 1019, 988, 957, 926, 895, 927, 958, 989, 1020, 1021, 990, 959, 991, 1022, 1023, 
	},
	{
		0,   1,   2,   3,  32,  33,  34,  35,  64,  65,  66,  67,  96,  97,  98,  99,   4,   5,   6,   7,  36,  37,  38,  39,  68,  69,  70,  71, 100, 101, 102, 103, 
		8,   9,  10,  11,  40,  41,  42,  43,  72,  73,  74,  75, 104, 105, 106, 107,  12,  13,  14,  15,  44,  45,  46,  47,  76,  77,  78,  79, 108, 109, 110, 111, 
		16,  17,  18,  19,  48,  49,  50,  51,  80,  81,  82,  83, 112, 113, 114, 115,  20,  21,  22,  23,  52,  53,  54,  55,  84,  85,  86,  87, 116, 117, 118, 119, 
		24,  25,  26,  27,  56,  57,  58,  59,  88,  89,  90,  91, 120, 121, 122, 123,  28,  29,  30,  31,  60,  61,  62,  63,  92,  93,  94,  95, 124, 125, 126, 127, 
		128, 129, 130, 131, 160, 161, 162, 163, 192, 193, 194, 195, 224, 225, 226, 227, 132, 133, 134, 135, 164, 165, 166, 167, 196, 197, 198, 199, 228, 229, 230, 231, 
		136, 137, 138, 139, 168, 169, 170, 171, 200, 201, 202, 203, 232, 233, 234, 235, 140, 141, 142, 143, 172, 173, 174, 175, 204, 205, 206, 207, 236, 237, 238, 239, 
		144, 145, 146, 147, 176, 177, 178, 179, 208, 209, 210, 211, 240, 241, 242, 243, 148, 149, 150, 151, 180, 181, 182, 183, 212, 213, 214, 215, 244, 245, 246, 247, 
		152, 153, 154, 155, 184, 185, 186, 187, 216, 217, 218, 219, 248, 249, 250, 251, 156, 157, 158, 159, 188, 189, 190, 191, 220, 221, 222, 223, 252, 253, 254, 255, 
		256, 257, 258, 259, 288, 289, 290, 291, 320, 321, 322, 323, 352, 353, 354, 355, 260, 261, 262, 263, 292, 293, 294, 295, 324, 325, 326, 327, 356, 357, 358, 359, 
		264, 265, 266, 267, 296, 297, 298, 299, 328, 329, 330, 331, 360, 361, 362, 363, 268, 269, 270, 271, 300, 301, 302, 303, 332, 333, 334, 335, 364, 365, 366, 367, 
		272, 273, 274, 275, 304, 305, 306, 307, 336, 337, 338, 339, 368, 369, 370, 371, 276, 277, 278, 279, 308, 309, 310, 311, 340, 341, 342, 343, 372, 373, 374, 375, 
		280, 281, 282, 283, 312, 313, 314, 315, 344, 345, 346, 347, 376, 377, 378, 379, 284, 285, 286, 287, 316, 317, 318, 319, 348, 349, 350, 351, 380, 381, 382, 383, 
		384, 385, 386, 387, 416, 417, 418, 419, 448, 449, 450, 451, 480, 481, 482, 483, 388, 389, 390, 391, 420, 421, 422, 423, 452, 453, 454, 455, 484, 485, 486, 487, 
		392, 393, 394, 395, 424, 425, 426, 427, 456, 457, 458, 459, 488, 489, 490, 491, 396, 397, 398, 399, 428, 429, 430, 431, 460, 461, 462, 463, 492, 493, 494, 495, 
		400, 401, 402, 403, 432, 433, 434, 435, 464, 465, 466, 467, 496, 497, 498, 499, 404, 405, 406, 407, 436, 437, 438, 439, 468, 469, 470, 471, 500, 501, 502, 503, 
		408, 409, 410, 411, 440, 441, 442, 443, 472, 473, 474, 475, 504, 505, 506, 507, 412, 413, 414, 415, 444, 445, 446, 447, 476, 477, 478, 479, 508, 509, 510, 511, 
		512, 513, 514, 515, 544, 545, 546, 547, 576, 577, 578, 579, 608, 609, 610, 611, 516, 517, 518, 519, 548, 549, 550, 551, 580, 581, 582, 583, 612, 613, 614, 615, 
		520, 521, 522, 523, 552, 553, 554, 555, 584, 585, 586, 587, 616, 617, 618, 619, 524, 525, 526, 527, 556, 557, 558, 559, 588, 589, 590, 591, 620, 621, 622, 623, 
		528, 529, 530, 531, 560, 561, 562, 563, 592, 593, 594, 595, 624, 625, 626, 627, 532, 533, 534, 535, 564, 565, 566, 567, 596, 597, 598, 599, 628, 629, 630, 631, 
		536, 537, 538, 539, 568, 569, 570, 571, 600, 601, 602, 603, 632, 633, 634, 635, 540, 541, 542, 543, 572, 573, 574, 575, 604, 605, 606, 607, 636, 637, 638, 639, 
		640, 641, 642, 643, 672, 673, 674, 675, 704, 705, 706, 707, 736, 737, 738, 739, 644, 645, 646, 647, 676, 677, 678, 679, 708, 709, 710, 711, 740, 741, 742, 743, 
		648, 649, 650, 651, 680, 681, 682, 683, 712, 713, 714, 715, 744, 745, 746, 747, 652, 653, 654, 655, 684, 685, 686, 687, 716, 717, 718, 719, 748, 749, 750, 751, 
		656, 657, 658, 659, 688, 689, 690, 691, 720, 721, 722, 723, 752, 753, 754, 755, 660, 661, 662, 663, 692, 693, 694, 695, 724, 725, 726, 727, 756, 757, 758, 759, 
		664, 665, 666, 667, 696, 697, 698, 699, 728, 729, 730, 731, 760, 761, 762, 763, 668, 669, 670, 671, 700, 701, 702, 703, 732, 733, 734, 735, 764, 765, 766, 767, 
		768, 769, 770, 771, 800, 801, 802, 803, 832, 833, 834, 835, 864, 865, 866, 867, 772, 773, 774, 775, 804, 805, 806, 807, 836, 837, 838, 839, 868, 869, 870, 871, 
		776, 777, 778, 779, 808, 809, 810, 811, 840, 841, 842, 843, 872, 873, 874, 875, 780, 781, 782, 783, 812, 813, 814, 815, 844, 845, 846, 847, 876, 877, 878, 879, 
		784, 785, 786, 787, 816, 817, 818, 819, 848, 849, 850, 851, 880, 881, 882, 883, 788, 789, 790, 791, 820, 821, 822, 823, 852, 853, 854, 855, 884, 885, 886, 887, 
		792, 793, 794, 795, 824, 825, 826, 827, 856, 857, 858, 859, 888, 889, 890, 891, 796, 797, 798, 799, 828, 829, 830, 831, 860, 861, 862, 863, 892, 893, 894, 895, 
		896, 897, 898, 899, 928, 929, 930, 931, 960, 961, 962, 963, 992, 993, 994, 995, 900, 901, 902, 903, 932, 933, 934, 935, 964, 965, 966, 967, 996, 997, 998, 999, 
		904, 905, 906, 907, 936, 937, 938, 939, 968, 969, 970, 971, 1000, 1001, 1002, 1003, 908, 909, 910, 911, 940, 941, 942, 943, 972, 973, 974, 975, 1004, 1005, 1006, 1007, 
		912, 913, 914, 915, 944, 945, 946, 947, 976, 977, 978, 979, 1008, 1009, 1010, 1011, 916, 917, 918, 919, 948, 949, 950, 951, 980, 981, 982, 983, 1012, 1013, 1014, 1015, 
		920, 921, 922, 923, 952, 953, 954, 955, 984, 985, 986, 987, 1016, 1017, 1018, 1019, 924, 925, 926, 927, 956, 957, 958, 959, 988, 989, 990, 991, 1020, 1021, 1022, 1023, 
	},
	{
		0,  32,  64,  96,   1,  33,  65,  97,   2,  34,  66,  98,   3,  35,  67,  99, 128, 160, 192, 224, 129, 161, 193, 225, 130, 162, 194, 226, 131, 163, 195, 227, 
		256, 288, 320, 352, 257, 289, 321, 353, 258, 290, 322, 354, 259, 291, 323, 355, 384, 416, 448, 480, 385, 417, 449, 481, 386, 418, 450, 482, 387, 419, 451, 483, 
		512, 544, 576, 608, 513, 545, 577, 609, 514, 546, 578, 610, 515, 547, 579, 611, 640, 672, 704, 736, 641, 673, 705, 737, 642, 674, 706, 738, 643, 675, 707, 739, 
		768, 800, 832, 864, 769, 801, 833, 865, 770, 802, 834, 866, 771, 803, 835, 867, 896, 928, 960, 992, 897, 929, 961, 993, 898, 930, 962, 994, 899, 931, 963, 995, 
		4,  36,  68, 100,   5,  37,  69, 101,   6,  38,  70, 102,   7,  39,  71, 103, 132, 164, 196, 228, 133, 165, 197, 229, 134, 166, 198, 230, 135, 167, 199, 231, 
		260, 292, 324, 356, 261, 293, 325, 357, 262, 294, 326, 358, 263, 295, 327, 359, 388, 420, 452, 484, 389, 421, 453, 485, 390, 422, 454, 486, 391, 423, 455, 487, 
		516, 548, 580, 612, 517, 549, 581, 613, 518, 550, 582, 614, 519, 551, 583, 615, 644, 676, 708, 740, 645, 677, 709, 741, 646, 678, 710, 742, 647, 679, 711, 743, 
		772, 804, 836, 868, 773, 805, 837, 869, 774, 806, 838, 870, 775, 807, 839, 871, 900, 932, 964, 996, 901, 933, 965, 997, 902, 934, 966, 998, 903, 935, 967, 999, 
		8,  40,  72, 104,   9,  41,  73, 105,  10,  42,  74, 106,  11,  43,  75, 107, 136, 168, 200, 232, 137, 169, 201, 233, 138, 170, 202, 234, 139, 171, 203, 235, 
		264, 296, 328, 360, 265, 297, 329, 361, 266, 298, 330, 362, 267, 299, 331, 363, 392, 424, 456, 488, 393, 425, 457, 489, 394, 426, 458, 490, 395, 427, 459, 491, 
		520, 552, 584, 616, 521, 553, 585, 617, 522, 554, 586, 618, 523, 555, 587, 619, 648, 680, 712, 744, 649, 681, 713, 745, 650, 682, 714, 746, 651, 683, 715, 747, 
		776, 808, 840, 872, 777, 809, 841, 873, 778, 810, 842, 874, 779, 811, 843, 875, 904, 936, 968, 1000, 905, 937, 969, 1001, 906, 938, 970, 1002, 907, 939, 971, 1003, 
		12,  44,  76, 108,  13,  45,  77, 109,  14,  46,  78, 110,  15,  47,  79, 111, 140, 172, 204, 236, 141, 173, 205, 237, 142, 174, 206, 238, 143, 175, 207, 239, 
		268, 300, 332, 364, 269, 301, 333, 365, 270, 302, 334, 366, 271, 303, 335, 367, 396, 428, 460, 492, 397, 429, 461, 493, 398, 430, 462, 494, 399, 431, 463, 495, 
		524, 556, 588, 620, 525, 557, 589, 621, 526, 558, 590, 622, 527, 559, 591, 623, 652, 684, 716, 748, 653, 685, 717, 749, 654, 686, 718, 750, 655, 687, 719, 751, 
		780, 812, 844, 876, 781, 813, 845, 877, 782, 814, 846, 878, 783, 815, 847, 879, 908, 940, 972, 1004, 909, 941, 973, 1005, 910, 942, 974, 1006, 911, 943, 975, 1007, 
		16,  48,  80, 112,  17,  49,  81, 113,  18,  50,  82, 114,  19,  51,  83, 115, 144, 176, 208, 240, 145, 177, 209, 241, 146, 178, 210, 242, 147, 179, 211, 243, 
		272, 304, 336, 368, 273, 305, 337, 369, 274, 306, 338, 370, 275, 307, 339, 371, 400, 432, 464, 496, 401, 433, 465, 497, 402, 434, 466, 498, 403, 435, 467, 499, 
		528, 560, 592, 624, 529, 561, 593, 625, 530, 562, 594, 626, 531, 563, 595, 627, 656, 688, 720, 752, 657, 689, 721, 753, 658, 690, 722, 754, 659, 691, 723, 755, 
		784, 816, 848, 880, 785, 817, 849, 881, 786, 818, 850, 882, 787, 819, 851, 883, 912, 944, 976, 1008, 913, 945, 977, 1009, 914, 946, 978, 1010, 915, 947, 979, 1011, 
		20,  52,  84, 116,  21,  53,  85, 117,  22,  54,  86, 118,  23,  55,  87, 119, 148, 180, 212, 244, 149, 181, 213, 245, 150, 182, 214, 246, 151, 183, 215, 247, 
		276, 308, 340, 372, 277, 309, 341, 373, 278, 310, 342, 374, 279, 311, 343, 375, 404, 436, 468, 500, 405, 437, 469, 501, 406, 438, 470, 502, 407, 439, 471, 503, 
		532, 564, 596, 628, 533, 565, 597, 629, 534, 566, 598, 630, 535, 567, 599, 631, 660, 692, 724, 756, 661, 693, 725, 757, 662, 694, 726, 758, 663, 695, 727, 759, 
		788, 820, 852, 884, 789, 821, 853, 885, 790, 822, 854, 886, 791, 823, 855, 887, 916, 948, 980, 1012, 917, 949, 981, 1013, 918, 950, 982, 1014, 919, 951, 983, 1015, 
		24,  56,  88, 120,  25,  57,  89, 121,  26,  58,  90, 122,  27,  59,  91, 123, 152, 184, 216, 248, 153, 185, 217, 249, 154, 186, 218, 250, 155, 187, 219, 251, 
		280, 312, 344, 376, 281, 313, 345, 377, 282, 314, 346, 378, 283, 315, 347, 379, 408, 440, 472, 504, 409, 441, 473, 505, 410, 442, 474, 506, 411, 443, 475, 507, 
		536, 568, 600, 632, 537, 569, 601, 633, 538, 570, 602, 634, 539, 571, 603, 635, 664, 696, 728, 760, 665, 697, 729, 761, 666, 698, 730, 762, 667, 699, 731, 763, 
		792, 824, 856, 888, 793, 825, 857, 889, 794, 826, 858, 890, 795, 827, 859, 891, 920, 952, 984, 1016, 921, 953, 985, 1017, 922, 954, 986, 1018, 923, 955, 987, 1019, 
		28,  60,  92, 124,  29,  61,  93, 125,  30,  62,  94, 126,  31,  63,  95, 127, 156, 188, 220, 252, 157, 189, 221, 253, 158, 190, 222, 254, 159, 191, 223, 255, 
		284, 316, 348, 380, 285, 317, 349, 381, 286, 318, 350, 382, 287, 319, 351, 383, 412, 444, 476, 508, 413, 445, 477, 509, 414, 446, 478, 510, 415, 447, 479, 511, 
		540, 572, 604, 636, 541, 573, 605, 637, 542, 574, 606, 638, 543, 575, 607, 639, 668, 700, 732, 764, 669, 701, 733, 765, 670, 702, 734, 766, 671, 703, 735, 767, 
		796, 828, 860, 892, 797, 829, 861, 893, 798, 830, 862, 894, 799, 831, 863, 895, 924, 956, 988, 1020, 925, 957, 989, 1021, 926, 958, 990, 1022, 927, 959, 991, 1023, 
	},
	{
		0,  32,   1,  64,  33,   2,  96,  65,  34,   3,  97,  66,  35,  98,  67,  99, 128, 160, 129, 192, 161, 130, 224, 193, 162, 131, 225, 194, 163, 226, 195, 227, 
		4,  36,   5,  68,  37,   6, 100,  69,  38,   7, 101,  70,  39, 102,  71, 103, 256, 288, 257, 320, 289, 258, 352, 321, 290, 259, 353, 322, 291, 354, 323, 355, 
		132, 164, 133, 196, 165, 134, 228, 197, 166, 135, 229, 198, 167, 230, 199, 231,   8,  40,   9,  72,  41,  10, 104,  73,  42,  11, 105,  74,  43, 106,  75, 107, 
		384, 416, 385, 448, 417, 386, 480, 449, 418, 387, 481, 450, 419, 482, 451, 483, 260, 292, 261, 324, 293, 262, 356, 325, 294, 263, 357, 326, 295, 358, 327, 359, 
		136, 168, 137, 200, 169, 138, 232, 201, 170, 139, 233, 202, 171, 234, 203, 235,  12,  44,  13,  76,  45,  14, 108,  77,  46,  15, 109,  78,  47, 110,  79, 111, 
		512, 544, 513, 576, 545, 514, 608, 577, 546, 515, 609, 578, 547, 610, 579, 611, 388, 420, 389, 452, 421, 390, 484, 453, 422, 391, 485, 454, 423, 486, 455, 487, 
		264, 296, 265, 328, 297, 266, 360, 329, 298, 267, 361, 330, 299, 362, 331, 363, 140, 172, 141, 204, 173, 142, 236, 205, 174, 143, 237, 206, 175, 238, 207, 239, 
		16,  48,  17,  80,  49,  18, 112,  81,  50,  19, 113,  82,  51, 114,  83, 115, 640, 672, 641, 704, 673, 642, 736, 705, 674, 643, 737, 706, 675, 738, 707, 739, 
		516, 548, 517, 580, 549, 518, 612, 581, 550, 519, 613, 582, 551, 614, 583, 615, 392, 424, 393, 456, 425, 394, 488, 457, 426, 395, 489, 458, 427, 490, 459, 491, 
		268, 300, 269, 332, 301, 270, 364, 333, 302, 271, 365, 334, 303, 366, 335, 367, 144, 176, 145, 208, 177, 146, 240, 209, 178, 147, 241, 210, 179, 242, 211, 243, 
		20,  52,  21,  84,  53,  22, 116,  85,  54,  23, 117,  86,  55, 118,  87, 119, 768, 800, 769, 832, 801, 770, 864, 833, 802, 771, 865, 834, 803, 866, 835, 867, 
		644, 676, 645, 708, 677, 646, 740, 709, 678, 647, 741, 710, 679, 742, 711, 743, 520, 552, 521, 584, 553, 522, 616, 585, 554, 523, 617, 586, 555, 618, 587, 619, 
		396, 428, 397, 460, 429, 398, 492, 461, 430, 399, 493, 462, 431, 494, 463, 495, 272, 304, 273, 336, 305, 274, 368, 337, 306, 275, 369, 338, 307, 370, 339, 371, 
		148, 180, 149, 212, 181, 150, 244, 213, 182, 151, 245, 214, 183, 246, 215, 247,  24,  56,  25,  88,  57,  26, 120,  89,  58,  27, 121,  90,  59, 122,  91, 123, 
		896, 928, 897, 960, 929, 898, 992, 961, 930, 899, 993, 962, 931, 994, 963, 995, 772, 804, 773, 836, 805, 774, 868, 837, 806, 775, 869, 838, 807, 870, 839, 871, 
		648, 680, 649, 712, 681, 650, 744, 713, 682, 651, 745, 714, 683, 746, 715, 747, 524, 556, 525, 588, 557, 526, 620, 589, 558, 527, 621, 590, 559, 622, 591, 623, 
		400, 432, 401, 464, 433, 402, 496, 465, 434, 403, 497, 466, 435, 498, 467, 499, 276, 308, 277, 340, 309, 278, 372, 341, 310, 279, 373, 342, 311, 374, 343, 375, 
		152, 184, 153, 216, 185, 154, 248, 217, 186, 155, 249, 218, 187, 250, 219, 251,  28,  60,  29,  92,  61,  30, 124,  93,  62,  31, 125,  94,  63, 126,  95, 127, 
		900, 932, 901, 964, 933, 902, 996, 965, 934, 903, 997, 966, 935, 998, 967, 999, 776, 808, 777, 840, 809, 778, 872, 841, 810, 779, 873, 842, 811, 874, 843, 875, 
		652, 684, 653, 716, 685, 654, 748, 717, 686, 655, 749, 718, 687, 750, 719, 751, 528, 560, 529, 592, 561, 530, 624, 593, 562, 531, 625, 594, 563, 626, 595, 627, 
		404, 436, 405, 468, 437, 406, 500, 469, 438, 407, 501, 470, 439, 502, 471, 503, 280, 312, 281, 344, 313, 282, 376, 345, 314, 283, 377, 346, 315, 378, 347, 379, 
		156, 188, 157, 220, 189, 158, 252, 221, 190, 159, 253, 222, 191, 254, 223, 255, 904, 936, 905, 968, 937, 906, 1000, 969, 938, 907, 1001, 970, 939, 1002, 971, 1003, 
		780, 812, 781, 844, 813, 782, 876, 845, 814, 783, 877, 846, 815, 878, 847, 879, 656, 688, 657, 720, 689, 658, 752, 721, 690, 659, 753, 722, 691, 754, 723, 755, 
		532, 564, 533, 596, 565, 534, 628, 597, 566, 535, 629, 598, 567, 630, 599, 631, 408, 440, 409, 472, 441, 410, 504, 473, 442, 411, 505, 474, 443, 506, 475, 507, 
		284, 316, 285, 348, 317, 286, 380, 349, 318, 287, 381, 350, 319, 382, 351, 383, 908, 940, 909, 972, 941, 910, 1004, 973, 942, 911, 1005, 974, 943, 1006, 975, 1007, 
		784, 816, 785, 848, 817, 786, 880, 849, 818, 787, 881, 850, 819, 882, 851, 883, 660, 692, 661, 724, 693, 662, 756, 725, 694, 663, 757, 726, 695, 758, 727, 759, 
		536, 568, 537, 600, 569, 538, 632, 601, 570, 539, 633, 602, 571, 634, 603, 635, 412, 444, 413, 476, 445, 414, 508, 477, 446, 415, 509, 478, 447, 510, 479, 511, 
		912, 944, 913, 976, 945, 914, 1008, 977, 946, 915, 1009, 978, 947, 1010, 979, 1011, 788, 820, 789, 852, 821, 790, 884, 853, 822, 791, 885, 854, 823, 886, 855, 887, 
		664, 696, 665, 728, 697, 666, 760, 729, 698, 667, 761, 730, 699, 762, 731, 763, 540, 572, 541, 604, 573, 542, 636, 605, 574, 543, 637, 606, 575, 638, 607, 639, 
		916, 948, 917, 980, 949, 918, 1012, 981, 950, 919, 1013, 982, 951, 1014, 983, 1015, 792, 824, 793, 856, 825, 794, 888, 857, 826, 795, 889, 858, 827, 890, 859, 891, 
		668, 700, 669, 732, 701, 670, 764, 733, 702, 671, 765, 734, 703, 766, 735, 767, 920, 952, 921, 984, 953, 922, 1016, 985, 954, 923, 1017, 986, 955, 1018, 987, 1019, 
		796, 828, 797, 860, 829, 798, 892, 861, 830, 799, 893, 862, 831, 894, 863, 895, 924, 956, 925, 988, 957, 926, 1020, 989, 958, 927, 1021, 990, 959, 1022, 991, 1023, 
	},
};

const u16 *g_puiScanIdx[4][5] = {
	{ g_puiScanIdx2[0], g_puiScanIdx4[0], g_puiScanIdx8[0], g_puiScanIdx16[0], g_puiScanIdx32[0] },
	{ g_puiScanIdx2[1], g_puiScanIdx4[1], g_puiScanIdx8[1], g_puiScanIdx16[1], g_puiScanIdx32[1] },
	{ g_puiScanIdx2[2], g_puiScanIdx4[2], g_puiScanIdx8[2], g_puiScanIdx16[2], g_puiScanIdx32[2] },
	{ g_puiScanIdx2[3], g_puiScanIdx4[3], g_puiScanIdx8[3], g_puiScanIdx16[3], g_puiScanIdx32[3] },
};

const u16 g_puiSigLastScan8x8[4][4] = {
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 2, 1, 3},
	{0, 2, 1, 3}
};

const u16 g_puiSigLastScanCG32x32[64] = {
	0,    8,    1,   16,    9,    2,   24,   17,
	10,    3,   32,   25,   18,   11,    4,   40,
	33,   26,   19,   12,    5,   48,   41,   34,
	27,   20,   13,    6,   56,   49,   42,   35,
	28,   21,   14,    7,   57,   50,   43,   36,
	29,   22,   15,   58,   51,   44,   37,   30,
	23,   59,   52,   45,   38,   31,   60,   53,
	46,   39,   61,   54,   47,   62,   55,   63,
};

const u8 g_pbGroupIdx[32] = {0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9};
const u8 g_pbMinInGroup[10] = {0,1,2,3,4,6,8,12,16,24};

Cabac::Cabac(ImageParameters const *pcImageParameters)
{
	m_uiLow = 0;	
	m_uiRange = 0;
	m_iBitsLeft = 0;
	m_bBuffer = 0;
	m_uiNumByte = 0;
	m_pcImageParameters = pcImageParameters;
}


void Cabac::InitCabacEntry(u32 uiTotalInputs, u32 uiQP, u8 *pbContextModels, const u8 *pbInitVals)
{
	for(u32 i=0; i<uiTotalInputs; i++ ) 
	{
		i32 iInitVal = pbInitVals[i];
		// See 9.2.1.1 in draft
		i32  iSlopeIdx		= iInitVal >> 4;
		i32  iIntersecIdx	= iInitVal & 15;
		i32  m				= (iSlopeIdx<<2) + iSlopeIdx - 45;
		i32  n				= (iIntersecIdx << 3) - 16;
		i32  iInitState		= Clip3(1,126,(((m*(i32(uiQP)))>>4)+n));
		u32 uiValMPS		= (iInitState >= 64 );
		pbContextModels[i]	= ( (uiValMPS ? (iInitState - 64) : (63 - iInitState)) <<1) + uiValMPS;
	}
}

void Cabac::ResetCabac()
{
	m_uiLow = 0;	
	m_uiRange = 510;
	m_iBitsLeft = 23;
	m_bBuffer = 0xFF;
	m_uiNumByte = 0;
}

void Cabac::InitCabac()
{
	u32 uiQP = m_pcImageParameters->m_uiQP;
	eSliceType eCurrSliceType = m_pcImageParameters->m_eSliceType;
	u8 *pbContextModels = m_pbContextModels;
	u32 uiOffset = 0;

	INIT_CABAC(1,NUM_SPLIT_FLAG_CTX,INIT_SPLIT_FLAG);
	INIT_CABAC(1,NUM_SKIP_FLAG_CTX,INIT_SKIP_FLAG);
	INIT_CABAC(1,NUM_ALF_CTRL_FLAG_CTX,INIT_ALF_CTRL_FLAG);
	INIT_CABAC(1,NUM_MERGE_FLAG_EXT_CTX,INIT_MERGE_FLAG_EXT);
	INIT_CABAC(1,NUM_MERGE_IDX_EXT_CTX,INIT_MERGE_IDX_EXT);
	INIT_CABAC(1,NUM_PART_SIZE_CTX,INIT_PART_SIZE);
	INIT_CABAC(1,NUM_CU_AMP_CTX,INIT_CU_AMP_POS);
	INIT_CABAC(1,NUM_PRED_MODE_CTX,INIT_PRED_MODE);
	INIT_CABAC(1,NUM_ADI_CTX,INIT_INTRA_PRED_MODE);
	INIT_CABAC(1,NUM_CHROMA_PRED_CTX,INIT_CHROMA_PRED_MODE);
	INIT_CABAC(1,NUM_INTER_DIR_CTX,INIT_INTER_DIR);
	INIT_CABAC(1,NUM_MV_RES_CTX,INIT_MVD);
	INIT_CABAC(1,NUM_REF_NO_CTX,INIT_REF_PIC);
	INIT_CABAC(1,NUM_DELTA_QP_CTX,INIT_DQP);
	INIT_CABAC(2,NUM_QT_CBF_CTX,INIT_QT_CBF);
	INIT_CABAC(1,NUM_QT_ROOT_CBF_CTX,INIT_QT_ROOT_CBF);
	INIT_CABAC(2,NUM_SIG_CG_FLAG_CTX,INIT_SIG_CG_FLAG);
	INIT_CABAC(1,NUM_SIG_FLAG_CTX,INIT_SIG_FLAG);
	INIT_CABAC(2,NUM_LAST_FLAG_XY_CTX,INIT_LAST);
	INIT_CABAC(2,NUM_LAST_FLAG_XY_CTX,INIT_LAST);
	INIT_CABAC(1,NUM_ONE_FLAG_CTX,INIT_ONE_FLAG);
	INIT_CABAC(1,NUM_ABS_FLAG_CTX,INIT_ABS_FLAG);
	INIT_CABAC(1,NUM_MVP_IDX_CTX,INIT_MVP_IDX);
	INIT_CABAC(1,NUM_TRANS_SUBDIV_FLAG_CTX,INIT_TRANS_SUBDIV_FLAG);
	INIT_CABAC(1,NUM_TRANSFORMSKIP_FLAG_CTX,INIT_TRANSFORMSKIP_FLAG);

	ResetCabac();
}

void Cabac::WriteOutputBitstream(BitStreamHandler *& pcBitStreamHandler)
{
	if(m_iBitsLeft < 12) 
	{
		u32 uiLeadByte = m_uiLow >> (24 - m_iBitsLeft);
		m_iBitsLeft += 8;
		m_uiLow &= (0xFFFFFFFF >> m_iBitsLeft);

		if(uiLeadByte == 0xFF)
			m_uiNumByte++;
		else 
		{
			if(m_uiNumByte > 0) 
			{
				u32 uiCarry = uiLeadByte >> 8;
				u32 uiByte = m_bBuffer + uiCarry;
				m_bBuffer = uiLeadByte & 0xFF;
				pcBitStreamHandler->PutUNInBitstream(uiByte,8,"CabacOutput");
				uiByte = (0xFF + uiCarry) & 0xFF;
				while (m_uiNumByte > 1)		// @todo Have to check this that why am I writing this byte repeatedly
				{
					pcBitStreamHandler->PutUNInBitstream(uiByte,8,"CabacOutput");
					m_uiNumByte--;
				}
			}
			else 
			{
				m_uiNumByte = 1;
				m_bBuffer = uiLeadByte;
			}
		}
	}
}

void Cabac::EncodeBin(u32 uiBinVal, u32 uiCtxState, BitStreamHandler *& pcBitStreamHandler)
{
	u8 ubState = m_pbContextModels[uiCtxState];
	u32 uiLPS = g_pbLPSTable[GET_STATE(ubState)][(m_uiRange>>6) & 0x3];
	m_uiRange -= uiLPS;

	if(uiBinVal != GET_MPS(ubState))
	{
		i32 iNumBits = g_pbRenormTable[uiLPS>>3];
		m_uiLow = (m_uiLow + m_uiRange ) << iNumBits;
		m_uiRange   = uiLPS << iNumBits;
		UPDATE_LPS(ubState);
		m_iBitsLeft -= iNumBits;
	}
	else 
	{
		UPDATE_MPS(ubState);
		if (m_uiRange < 256 )
		{
			m_uiLow <<= 1;
			m_uiRange <<= 1;
			m_iBitsLeft--;
		}
	}

	m_pbContextModels[uiCtxState] = ubState;
	WriteOutputBitstream(pcBitStreamHandler);
}

void Cabac::EncodeBinsEP(u32 uiBinValues, u32 uiNumBins, BitStreamHandler *& pcBitStreamHandler)
{
	MAKE_SURE((uiBinValues < (u32(1 << uiNumBins))),"Binary value overflows");

	while(uiNumBins > 8) 
	{
		uiNumBins -= 8;
		u32 uiPattern = uiBinValues >> uiNumBins;
		m_uiLow <<= 8;
		m_uiLow += m_uiRange * uiPattern;
		uiBinValues -= uiPattern << uiNumBins;
		m_iBitsLeft -= 8;

		WriteOutputBitstream(pcBitStreamHandler);
	}

	m_uiLow <<= uiNumBins;
	m_uiLow  += m_uiRange * uiBinValues;
	m_iBitsLeft -= uiNumBins;
	WriteOutputBitstream(pcBitStreamHandler);
}

void Cabac::EncodeIntraDirAngGrpL(u32 uiTotPUs, u32 *puiPredIdx, BitStreamHandler *& pcBitStreamHandler)
{
	for(u32 i=0;i<uiTotPUs;i++)
		EncodeBin(RET_1_IF_TRUE(puiPredIdx[i]<3),OFF_INTRA_PRED_CTX,pcBitStreamHandler);
	for(u32 i=0;i<uiTotPUs;i++)
	{
		u32 uiCurrPredIdx = puiPredIdx[i];
		if(uiCurrPredIdx < 3)
			EncodeBinsEP(uiCurrPredIdx+(uiCurrPredIdx!=0),1+(uiCurrPredIdx!=0),pcBitStreamHandler);
		else
		{
			MAKE_SURE((uiCurrPredIdx-3 < TOTAL_INTRA_MODES),"Wrong Prediction Index");
			EncodeBinsEP(uiCurrPredIdx-3,5,pcBitStreamHandler);
		}
	}
}

void Cabac::EncodeIntraDirAngC(u32 uiModeIdxC, BitStreamHandler *& pcBitStreamHandler)
{
	EncodeBin((uiModeIdxC!=CHROMA_DM_MODE),OFF_CHROMA_PRED_CTX,pcBitStreamHandler);
	if(uiModeIdxC != CHROMA_DM_MODE)
		EncodeBinsEP(uiModeIdxC,2,pcBitStreamHandler);
}

u32 Cabac::GetCoeffScanIdx(u32 uiSize, u32 uiMode, bit bIsLuma)
{
	u32 uiCTXIdx;
	u32 uiScanIdx;
	u32 uiOffset = bIsLuma ? 0 : 1;

	switch(uiSize) 
	{
	case  2: uiCTXIdx = 6; break;
	case  4: uiCTXIdx = 5; break;
	case  8: uiCTXIdx = 4; break;
	case 16: uiCTXIdx = 3; break;
	case 32: uiCTXIdx = 2; break;
	case 64: uiCTXIdx = 1; break;
	default: uiCTXIdx = 0; break;
	}

	uiScanIdx = SCAN_ZIGZAG;
	if(uiCTXIdx > 3+uiOffset && uiCTXIdx < 6+uiOffset)
		uiScanIdx = ABS((i32(uiMode))-VER_MODE_IDX) < 5 ? SCAN_HOR : (ABS((i32(uiMode))-HOR_MODE_IDX) < 5 ? SCAN_VER : SCAN_ZIGZAG);

	return uiScanIdx;
}

void Cabac::CodeLastSignifXY(u32 uiPosX, u32 uiPosY, u32 uiSize, u32 uiScanIdx, bit bIsLuma, BitStreamHandler *& pcBitStreamHandler)
{
	const u32 uiLog2Size = LOG2(uiSize-1);

	if(uiScanIdx == SCAN_VER) 
	{
		u32 tmp = uiPosY;
		uiPosY = uiPosX;
		uiPosX = tmp;
	}

	u32 uiCtxLast;
	u32 uiCtxX = OFF_LAST_X_CTX + (bIsLuma ? 0 : NUM_LAST_FLAG_XY_CTX);
	u32 uiCtxY = OFF_LAST_Y_CTX + (bIsLuma ? 0 : NUM_LAST_FLAG_XY_CTX);
	u32 uiGroupIdxX = g_pbGroupIdx[uiPosX];
	u32 uiGroupIdxY = g_pbGroupIdx[uiPosY];

	i32 iBlkSizeOffsetXY = bIsLuma ? ((uiLog2Size-2)*3 + ((uiLog2Size-1)>>2)) : 0;
	i32 iShiftXY = bIsLuma ? ((uiLog2Size+1)>>2) : uiLog2Size-2;

	// posX
	for(uiCtxLast = 0; uiCtxLast < uiGroupIdxX; uiCtxLast++)
		EncodeBin(1, uiCtxX + (iBlkSizeOffsetXY + (uiCtxLast >>iShiftXY)), pcBitStreamHandler);

	if(uiGroupIdxX < g_pbGroupIdx[uiSize-1])
		EncodeBin(0, uiCtxX + (iBlkSizeOffsetXY + (uiCtxLast >>iShiftXY)), pcBitStreamHandler);

	// posY
	for(uiCtxLast = 0; uiCtxLast < uiGroupIdxY; uiCtxLast++)
		EncodeBin(1, uiCtxY + (iBlkSizeOffsetXY + (uiCtxLast >>iShiftXY)), pcBitStreamHandler);

	if(uiGroupIdxY < g_pbGroupIdx[uiSize-1])
		EncodeBin(0, uiCtxY + (iBlkSizeOffsetXY + (uiCtxLast >>iShiftXY)), pcBitStreamHandler);


	if(uiGroupIdxX > 3) 
	{
		u32 uiCount = (uiGroupIdxX - 2) >> 1;
		uiPosX = uiPosX - g_pbMinInGroup[uiGroupIdxX];
		EncodeBinsEP(uiPosX, uiCount, pcBitStreamHandler);
	}

	if(uiGroupIdxY > 3) 
	{
		u32 uiCount = (uiGroupIdxY - 2) >> 1;
		uiPosY = uiPosY - g_pbMinInGroup[uiGroupIdxY];
		EncodeBinsEP(uiPosY, uiCount, pcBitStreamHandler);
	}
}

u32 Cabac::GetSigCoeffGroupCtxInc(const u8 *ubSigCoeffGroupFlag, const i32 iCGPosX, const i32 iCGPosY, const u32 uiScanIdx, u32 uiSize)
{
	u32 uiRight = 0;
	u32 uiLower = 0;
	u32 uiWidth = uiSize;
	u32 uiHeight = uiSize;

	uiWidth >>= 2;
	uiHeight >>= 2;
	if(iCGPosX < i32(uiWidth) - 1)
		uiRight = (ubSigCoeffGroupFlag[iCGPosY*uiWidth + iCGPosX + 1] != 0);

	if(iCGPosY < i32(uiHeight) - 1)
		uiLower = (ubSigCoeffGroupFlag[(iCGPosY+1)*uiWidth + iCGPosX] != 0);

	return (uiRight || uiLower);
}

i32 Cabac::CalcPatternSigCtx(const u8 *ubSigCoeffGroupFlag, i32 iCGPosX, i32 iCGPosY, u32 uiSize)
{
	if(uiSize == 4)
		return -1;

	u32 uiSigRight = 0;
	u32 uiSigLower = 0;

	uiSize >>= 2;
	if(iCGPosX < i32(uiSize) - 1)
		uiSigRight = (ubSigCoeffGroupFlag[iCGPosY*uiSize + iCGPosX + 1] != 0);

	if (iCGPosY < i32(uiSize) - 1 )
		uiSigLower = (ubSigCoeffGroupFlag[(iCGPosY+1)*uiSize + iCGPosX] != 0);

	return uiSigRight + (uiSigLower<<1);
}

i32 Cabac::GetSigCtxInc(i32 iPatternSigCtx, u32 uiScanIdx, i32 iPosX, i32 iPosY, i32 iBlkType, u32 uiSize, bit bIsLuma)
{
	const i32 piCtxIndMap[16] = {
		0, 1, 4, 5,
		2, 3, 4, 5,
		6, 6, 8, 8,
		7, 7, 8, 8
	};

	if(iPosX + iPosY == 0)
		return 0;

	if(iBlkType == 2)
		return piCtxIndMap[4*iPosY + iPosX];

	i32 iOffset = (iBlkType == 3) ? (uiScanIdx==SCAN_DIAG ? 9 : 15) : (bIsLuma ? 21 : 12);
	i32 iPosXInSubset = iPosX-((iPosX>>2)<<2);
	i32 iPosYInSubset = iPosY-((iPosY>>2)<<2);

	i32 iCnt = 0;
	if(iPatternSigCtx == 0)
		iCnt = iPosXInSubset+iPosYInSubset<=2 ? (iPosXInSubset+iPosYInSubset==0 ? 2 : 1) : 0;
	else if(iPatternSigCtx == 1)
		iCnt = iPosYInSubset<=1 ? (iPosYInSubset==0 ? 2 : 1) : 0;
	else if(iPatternSigCtx == 2)
		iCnt = iPosXInSubset<=1 ? (iPosXInSubset==0 ? 2 : 1) : 0;
	else
		iCnt = 2;

	return (( bIsLuma && ((iPosX>>2) + (iPosY>>2)) > 0 ) ? 3 : 0) + iOffset + iCnt;
}

void Cabac::WriteCoeffRemainExGolomb(i32 iSymbol, u32 uiParam, BitStreamHandler *& pcBitStreamHanlder)
{
	i32 iCodeNum  = iSymbol;
	u32 uiLength;

	if (iCodeNum < (COEF_REMAIN_BIN_REDUCTION << uiParam)) 
	{
		uiLength = iCodeNum>>uiParam;
		EncodeBinsEP((1<<(uiLength+1))-2, uiLength+1, pcBitStreamHanlder);
		// OPT_ME: use mask to replace '%'
		if(uiParam)
			EncodeBinsEP((iCodeNum%(1<<uiParam)), uiParam, pcBitStreamHanlder);
	}
	else 
	{
		uiLength = uiParam;
		iCodeNum = iCodeNum - (COEF_REMAIN_BIN_REDUCTION << uiParam);
		while(iCodeNum >= (1 << uiLength)) 
		{
			iCodeNum -= (1 << uiLength);
			uiLength++;
		}
		EncodeBinsEP((1<<(COEF_REMAIN_BIN_REDUCTION+uiLength+1-uiParam))-2,COEF_REMAIN_BIN_REDUCTION+uiLength+1-uiParam,pcBitStreamHanlder);
		if(uiLength)
			EncodeBinsEP(iCodeNum, uiLength, pcBitStreamHanlder);
	}

}

void Cabac::EncodeCoeffNxN(i16 *piCoeff, u32 uiSize, u32 uiMode, bit bIsLuma, BitStreamHandler *& pcBitStreamHandler)
{
	MAKE_SURE((uiSize <= CTU_WIDTH),"NxN coefficients for cabac are larger than CTU_WIDTH x CTU_HEIGHT");
	const u32 uiStride = (CTU_WIDTH >> (bIsLuma ? 0 : 1));
	const u32 uiLog2Size = LOG2(uiSize-1);
	const u32 uiShift = MLS_CG_SIZE >> 1;
	const u32 uiNumBlkSide = uiSize >> uiShift;
	const u32 uiBlockType = uiLog2Size;

	u8 ubSigCoeffGroupFlag[MLS_GRP_NUM];
	memset(ubSigCoeffGroupFlag,0,sizeof(ubSigCoeffGroupFlag));

	u32 uiScanIdx = GetCoeffScanIdx(uiSize,uiMode,bIsLuma);	// Scaning direction
	if(uiScanIdx == SCAN_ZIGZAG) 
		uiScanIdx = SCAN_DIAG;

	const u16 *uiScan = g_puiScanIdx[uiScanIdx][uiLog2Size-1];
	const u16 *uiScanCG = g_puiScanIdx[uiScanIdx][uiLog2Size < 3 ? 0 : 1];
	if(uiLog2Size == 3)
		uiScanCG = g_puiSigLastScan8x8[uiScanIdx];
	else if(uiLog2Size == 5)
		uiScanCG = g_puiSigLastScanCG32x32;

	u32 uiNumSig = 0;	// Total non-zero signals
	for(u32 i=0;i<uiSize;i++)
		for(u32 j=0;j<uiSize;j++)
			uiNumSig += RET_1_IF_TRUE(piCoeff[i*uiStride+j] != 0);

	i32 iScanPosLast = -1;
	i32 iRealPos = -1;
	i32 iPosLast;
	do
	{
		iPosLast = uiScan[++iScanPosLast];
		u32 uiPosY = iPosLast >> uiLog2Size;
		u32 uiPosX = iPosLast - (uiPosY << uiLog2Size);
		u32 uiBlkIdx = uiNumBlkSide * (uiPosY >> uiShift) + (uiPosX >> uiShift);
		iRealPos = uiPosY * uiStride + uiPosX;
		if(piCoeff[iRealPos])
		{
			ubSigCoeffGroupFlag[uiBlkIdx] = 1;
			uiNumSig--;
		}
	}while(uiNumSig > 0);

	u32 uiPosLastY = iPosLast >> uiLog2Size;
	u32 uiPosLastX = iPosLast - (uiPosLastY << uiLog2Size);
	CodeLastSignifXY(uiPosLastX,uiPosLastY,uiSize,uiScanIdx,bIsLuma,pcBitStreamHandler);

	u32 uiBaseCoeffGroupCtx = OFF_SIG_CG_FLAG_CTX + (bIsLuma ? 0 : NUM_SIG_CG_FLAG_CTX);
	u32 uiBaseCtx = OFF_SIG_FLAG_CTX + (bIsLuma ? 0 : NUM_SIG_FLAG_CTX_LUMA);

	const i32 iLastScanSet = iScanPosLast >> LOG2_SCAN_SET_SIZE;
	u32 c1 = 1;
	i32 iScanPosSig = iScanPosLast;

	for(i32 iSubSet = iLastScanSet; iSubSet >= 0; iSubSet--) 
	{
		i32 iNumNonZero = 0;
		i32 iSubPos = iSubSet << LOG2_SCAN_SET_SIZE;
		u32 uiGoRiceParam = 0;
		i16 iAbsCoeff[16];
		u32 uiSignCoeff = 0;

		if(iScanPosSig == iScanPosLast) 
		{
			iAbsCoeff[0] = ABS(piCoeff[iRealPos]);
			uiSignCoeff = piCoeff[iRealPos] < 0;
			iNumNonZero = 1;
			iScanPosSig--;
		}

		i32 iCGBlkPos = uiScanCG[iSubSet];
		i32 iCGPosY   = iCGBlkPos / uiNumBlkSide;
		i32 iCGPosX   = iCGBlkPos - (iCGPosY * uiNumBlkSide);
		if( iSubSet == iLastScanSet || iSubSet == 0)
			ubSigCoeffGroupFlag[iCGBlkPos] = 1;
		else 
		{
			u32 uiSigCoeffGroup = (ubSigCoeffGroupFlag[iCGBlkPos] != 0);
			u32 uiCtxSig  = GetSigCoeffGroupCtxInc(ubSigCoeffGroupFlag, iCGPosX, iCGPosY, uiScanIdx, uiSize);
			EncodeBin(uiSigCoeffGroup, uiBaseCoeffGroupCtx+uiCtxSig, pcBitStreamHandler);
		}

		if(ubSigCoeffGroupFlag[iCGBlkPos]) 
		{
			i32 iPatternSigCtx = CalcPatternSigCtx(ubSigCoeffGroupFlag, iCGPosX, iCGPosY, uiSize );
			u32 uiBlkPos, uiPosY, uiPosX, uiSig, uiCtxSig;
			u32 uiRealBlkPos;
			for(;iScanPosSig >= iSubPos; iScanPosSig--) 
			{
				uiBlkPos     = uiScan[iScanPosSig];
				uiPosY       = uiBlkPos >> uiLog2Size;
				uiPosX       = uiBlkPos - ( uiPosY << uiLog2Size );
				uiRealBlkPos = uiPosY * uiStride + uiPosX;
				uiSig        = (piCoeff[ uiRealBlkPos ] != 0);
				if((iScanPosSig != iSubPos) || iSubSet == 0 || iNumNonZero) 
				{
					uiCtxSig  = GetSigCtxInc(iPatternSigCtx, uiScanIdx, uiPosX, uiPosY, uiBlockType, uiSize, bIsLuma);
					EncodeBin(uiSig, uiBaseCtx+uiCtxSig, pcBitStreamHandler);
				}
				if(uiSig) 
				{
					iAbsCoeff[iNumNonZero] = ABS(piCoeff[uiRealBlkPos]);
					uiSignCoeff = (uiSignCoeff << 1) + (piCoeff[uiRealBlkPos] < 0);
					iNumNonZero++;
				}
			}
		}
		else
			iScanPosSig = iSubPos - 1;

		if(iNumNonZero > 0) 
		{
			u32 uiCtxSet = (iSubSet > 0 && bIsLuma) ? 2 : 0;

			if(c1 == 0)
				uiCtxSet++;

			c1 = 1;
			u32 uiBaseCtxMod = OFF_ONE_FLAG_CTX + (uiCtxSet<<2) + (bIsLuma ? 0 : NUM_ONE_FLAG_CTX_LUMA);

			i32 iNumC1Flag = min(iNumNonZero, C1FLAG_NUMBER);
			i32 iFirstC2FlagIdx = 16;
			for(i32 iIdx = 0; iIdx < iNumC1Flag; iIdx++) 
			{
				u32 uiSymbol = iAbsCoeff[ iIdx ] > 1;
				EncodeBin(uiSymbol, uiBaseCtxMod + c1, pcBitStreamHandler);
				if( uiSymbol ) 
				{
					c1 = 0;
					iFirstC2FlagIdx = min(iFirstC2FlagIdx, iIdx);
				}
				else if(c1 != 0)
					c1 = min(c1+1, 3);
			}

			if(c1 == 0) 
			{
				uiBaseCtxMod = OFF_ABS_FLAG_CTX + uiCtxSet + (bIsLuma ? 0 : NUM_ABS_FLAG_CTX_LUMA);
				if(iFirstC2FlagIdx != 16 ) 
				{
					u32 uiSymbol = iAbsCoeff[ iFirstC2FlagIdx ] > 2;
					EncodeBin(uiSymbol, uiBaseCtxMod + 0, pcBitStreamHandler);
				}
			}

			EncodeBinsEP(uiSignCoeff, iNumNonZero, pcBitStreamHandler);

			i32 iFirstCoeff2 = 1;
			if(c1 == 0 || iNumNonZero > C1FLAG_NUMBER) 
			{
				for(i32 iIdx = 0; iIdx < iNumNonZero; iIdx++) 
				{
					i32 iBaseLevel = (iIdx < C1FLAG_NUMBER) ? (2 + iFirstCoeff2 ) : 1;

					if(iAbsCoeff[iIdx] >= iBaseLevel) 
					{
						WriteCoeffRemainExGolomb(iAbsCoeff[iIdx]-iBaseLevel, uiGoRiceParam, pcBitStreamHandler);
						if(iAbsCoeff[iIdx] > 3*(1<<uiGoRiceParam))
							uiGoRiceParam = min(uiGoRiceParam+ 1, 4);
					}
					if( iAbsCoeff[ iIdx ] >= 2 )
						iFirstCoeff2 = 0;
				}
			}
		}
	}
}

void Cabac::EncodeTerminatingBit(u32 uiBinValue, BitStreamHandler *& pcBitStreamHanlder)
{
	m_uiRange -= 2;
	if(uiBinValue) 
	{
		m_uiLow  += m_uiRange;
		m_uiLow <<= 7;
		m_uiRange = 2 << 7;
		m_iBitsLeft -= 7;
	}
	else if (m_uiRange < 256)
	{
		m_uiLow   <<= 1;
		m_uiRange <<= 1;
		m_iBitsLeft--;
	}
	WriteOutputBitstream(pcBitStreamHanlder);
}

void Cabac::Flush(BitStreamHandler *& pcBitStreamHanlder)
{
	if(m_uiLow >> (32 - m_iBitsLeft)) 
	{
		pcBitStreamHanlder->PutUNInBitstream(m_bBuffer+1,8,"CabacFlush0");
		while(m_uiNumByte > 1)
		{
			pcBitStreamHanlder->PutUNInBitstream(0,8,"CabacFlush1");
			m_uiNumByte--;
		}
		m_uiLow -= 1 << (32 - m_iBitsLeft);
	}
	else  
	{
		if(m_uiNumByte > 0)
			pcBitStreamHanlder->PutUNInBitstream(m_bBuffer,8,"CabacFlush2");
		while(m_uiNumByte > 1) 
		{
			pcBitStreamHanlder->PutUNInBitstream(0xFF,8,"CabacFlush3");
			m_uiNumByte--;
		}
	}
	pcBitStreamHanlder->PutUNInBitstream(m_uiLow>>8,24-m_iBitsLeft,"CabacFlush4");
}

void Cabac::FinishEncodeCTU(bit bIsLastTileCTU, bit bIsLastSliceCTU, BitStreamHandler *& pcBitStreamHandler)
{
	// We check for the end_of_slice_segment_flag here. If this is not the last CTU,
	// then we just encode 0. If we have the last CTU of the slice, we just ignore this
	// and insert the terminating 1-bit in the tile end test condition (as shown below).
	// This is written a little different than reference, but it must work the same.
	if(!bIsLastSliceCTU)
		EncodeTerminatingBit(0,pcBitStreamHandler);

	// If the CTU is the bottom right (last) CTU of the tile, then call tile termination
	if(bIsLastTileCTU)
	{
		EncodeTerminatingBit(1,pcBitStreamHandler);
		Flush(pcBitStreamHandler);
		pcBitStreamHandler->WriteRBSPTrailingBits();	// Byte alignment
		pcBitStreamHandler->FlushRemBytes();	// Data due to byte alignment might still be in the local buffer of the bitstream handler
	}
}
